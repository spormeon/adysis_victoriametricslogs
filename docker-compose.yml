services:
  # Victoria Metrics instance, storing metrics
  # victoria-metrics:
  #   image: adysis/victoriametrics:v2.0.8
  #   container_name: victoriametrics
  #   ports:
  #     - 8080:8080  # UI access
  #     - 8428:8428
  #     - 8089:8089
  #     - 8089:8089/udp
  #     - 2003:2003
  #     - 2003:2003/udp
  #     - 4242:4242
  #   volumes:
  #     - victoria-metrics-data:/storage  # Defined volume
  #     - /proc:/host/proc:ro
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Scraping config
  #     - ./vm_metrics_config.sh:/etc/vm/vm_metrics_config.sh  # Custom config script
  #   environment:
  #     - ENABLE_TCP6=true  # Enable TCP over IPv6
  #   # command:
  #   #   - "sh /etc/vm/vm_metrics_config.sh"  # Executes the custom config script
  #   restart: always
  #   networks:
  #     - adysis-metrics
  #   # network_mode: host  # Use host network mode directly
  #   dns:
  #     - 127.0.0.1  # Docker's internal DNS resolver

  # Victoria Logs instance, storing and querying logs
  victorialogs:
    image: adysis/victoriametrics-logs:v1.3.0
    # image: victoriametrics/victoria-logs:v1.23.2-victorialogs
    container_name: victorialogs
    ports:
      # - 8428:8428  # Exposing the logs API on port 8686
      - 9428:9428  # ui
      - 9429:9428 # use for VMl domain access
      - "5514:5514"  # expose for syslogs
    volumes:
      - victorialogs-data:/vlogs  # Volume to store logs data
      # - ./vm_metrics_config.sh:/etc/vm/vm_metrics_config.sh  # Custom config script
    # entrypoint: ["/bin/sh", "-c", "/etc/vm/vm_metrics_config.sh && /victoria-logs-prod"]
    # environment:
    #   - ENABLE_TCP6=true  # Enable TCP over IPv6
    command:
      # - "-storageDataPath=/vlogs"
      - "-syslog.listenAddr.tcp=:5514"   # Listen on TCP port 514 for syslog messages
      - "-syslog.listenAddr.udp=:5514"   # Optionally listen on UDP port 514 for syslog messages 
      # - "-syslog.compressMethod.tcp=gzip"
      - "-syslog.compressMethod.tcp=gzip"
      - "-syslog.useLocalTimestamp.tcp"
      # - "-http=:9428"  # Expose UI on port 8080
      # - "-api-http=:8428"  # Expose API on port 8428
      # - -loggerFormat=json
      # - -syslog.listenAddr.tcp=0.0.0.0:514
      # - -datadog.streamFields=service,hostname,ddsource
      # - -journald.streamFields=_HOSTNAME,_SYSTEMD_UNIT,_PID
      # - -journald.ignoreFields=MESSAGE_ID,INVOCATION_ID,USER_INVOCATION_ID,
      # - -journald.ignoreFields=_BOOT_ID,_MACHINE_ID,_SYSTEMD_INVOCATION_ID,_STREAM_ID,_UID
    restart: always
    networks:
      - adysis-logs
        # aliases:
        #   - victorialogs
    # network_mode: host  # Use host network mode directly
    # dns:
    #   - 127.0.0.1  # Docker's internal DNS resolver
    logging:
      driver: "json-file"  # Use the default logging driver
      options:
        max-size: "10m"  # Optional: Rotate logs when they exceed 10 MB
        max-file: "3"  # Keep 3 rotated log files

  # Vector service to collect logs and send to VictoriaLogs
  vector:
    image: docker.io/timberio/vector:0.47.X-alpine
    container_name: vector
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        volume:
          nocopy: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        volume:
          nocopy: true
      # - ./vector.yml:/usr/local/etc/victoriametricslogs/vector.yaml:ro  # Vector configuration file
      - /var/run/docker.sock:/var/run/docker.sock  # Allow access to Docker logs
      - /var/lib/docker:/var/lib/docker
      - ./vector.yml:/etc/vector/vector.yaml:ro  # Vector configuration file
      # - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    # environment:
    #   - VECTOR_LOG="error"  # Enable debug logs for troubleshooting
    #   # - ENABLE_TCP6=true  # Enable TCP over IPv6
    ports:
      - 8686:8686  # Exposing the Vector API (if needed)
      # - 9598:9598  # Metrics scraping or other purposes
      # - 9000:9000  # Exposing the syslog UDP port on port 9000 
      # - 514:514  # syslog endpoint
    restart: always
    depends_on:
      - victorialogs
    user: root
    networks:
      - adysis-logs
        # aliases:
        #   - vector
    # network_mode: host  # Use host network mode directly
    # dns:
    #   - 127.0.0.1  # Docker's internal DNS resolver
    logging:
      driver: "json-file"  # Use the default logging driver
      options:
        max-size: "10m"  # Optional: Rotate logs when they exceed 10 MB
        max-file: "3"  # Keep 3 rotated log files

  # victoriametrics:
  #   image: victoriametrics/victoria-metrics:v1.112.0
  #   ports:
  #     - '8428:8428'
  #   command:
  #     - -storageDataPath=/vmsingle
  #     - -loggerFormat=json
  #   volumes:
  #     - victoriametrics:/vmsingle

  # Alertmanager for handling alerts
  # alertmanager:
  #   container_name: alertmanager
  #   image: prom/alertmanager:v0.28.1
  #   volumes:
  #     # - .alertmanager.yml:/config/alertmanager.yml
  #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   environment:
  #     - ENABLE_TCP6=true  # Enable TCP over IPv6
  #   # command:
  #     # - ./alertmanager.yml=/alertmanager.yml
  #     # - "--web.listen-address=:9093"  # Optional: bind to specific address or port
  #   ports:
  #     - 9093:9093  # metrics
  #     - 8880:8880  
  #   restart: always
  #   networks:
  #     - adysis-metrics
  #   # network_mode: host  # Use host network mode directly
  #   dns:
  #     - 127.0.0.1  # Docker's internal DNS resolver

volumes:
  # victoria-metrics-data: {}  # Define the volume for Victoria Metrics
  victorialogs-data: {}  # Define the volume for VictoriaLogs
  # victoriametrics: 


networks:
  adysis-logs:
    name: adysis-logs
    driver: bridge # Use the external network shared with Victoria Metrics and Perses
    # attachable: true  # Allow manual attachment of containers to the network



