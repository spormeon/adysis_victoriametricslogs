api:
  enabled: true
  address: 0.0.0.0:8686

# sources:
#   docker:
#     type: docker_logs
#   demo:
#     type: demo_logs
#     format: apache_common
#     interval: 10
#   vector_metrics:
#     type: internal_metrics
#   syslog:
#     type: syslog
#     address: "0.0.0.0:514"  # Port to listen for syslog messages
#     mode: "rfc5424"  # Specify the syslog format. This could be "rfc3164", "rfc5424", or "ietf" depending on what you need.
    

# transforms:
#   msg_parser:
#     type: remap
#     inputs: [docker, syslog]
#     source: |
#       .message = parse_json(.message) ?? .message


# sinks:
#   elasticsearch:
#     type: elasticsearch
#     inputs: [demo, msg_parser]
#     endpoints: [http://localhost:9428/insert/elasticsearch/]
#     mode: bulk
#     api_version: v8
#     compression: gzip
#     healthcheck:
#       enabled: true
#     request:
#       headers:
#         VL-Stream-Fields: source_type,label.com.docker.compose.service
#         VL-Time-Field: timestamp
#         VL-Msg-Field: message,msg,_msg,message.message,message.log
#         AccountID: "0"
#         ProjectID: "0"
#   victoriametrics:
#     type: prometheus_remote_write
#     endpoint: http://victoriametrics:8428/api/v1/write
#     inputs: [vector_metrics, msg_parser]
#     healthcheck:
#       enabled: true
#   prometheus_exporter:
#     type: prometheus_exporter
#     inputs:
#       - vector_metrics
#     healthcheck:
#       enabled: true
#     address: "localhost:9598"  # Expose the metrics on port 8687 for Prometheus to scrape
#     namespace: "vector"  # The namespace for the metrics exposed
#     # Optional: you can add any other labels you want here
#     labels:
#       source_type: "vector_metrics"
#       environment: "production"




#  TEST SETTINGS 
sources:
  syslog_server:
    type: syslog
    address: "0.0.0.0:9000"
    max_length: 102400
    mode: udp
    # permit_origin:
    #   - "10.0.0.0/8"
    #   - "127.0.0.0/8"
    #   - "192.168.0.0/16"

transforms:
  parse_syslog:
    type: remap
    inputs:
      - syslog_server
    drop_on_error: false
    drop_on_abort: false
    # source: |
    #   .appname = string!(.appname)
    #   if contains(.appname, "mathias") {
    #     .fields = parse_json!(.message)
    #   }
    #   if contains(.appname, "pbs") {
    #     .fields = parse_grok!(.message, "UPID:%{DATA:pbs_host}:%{DATA:task_id_1}:%{DATA:task_id_2}:%{DATA:task_id_3}:%{DATA:task_id_4}:%{DATA:cmd}:%{DATA:task_path}:%{DATA:user}:%{GREEDYDATA:log_message}")
    #     .fields.owner = "infra"
    #   }
    source: |
      # Parse the log line into individual fields
      .log_fields = split!(.message, "|")
      
      # Map each field to a specific name
      .cache_status = .log_fields[0]
      .status_code = .log_fields[1]
      .timestamp = .log_fields[2]
      .bytes_sent = .log_fields[3]
      .pull_zone_id = .log_fields[4]
      .remote_ip = .log_fields[5]
      .referer_url = .log_fields[6]
      .url = .log_fields[7]
      .edge_location = .log_fields[8]
      .user_agent = .log_fields[9]
      .unique_request_id = .log_fields[10]
      .country_code = .log_fields[11]

      # Optionally, you can also convert timestamp to a proper time format if needed
      .timestamp = parse_date!(.timestamp, "%Y-%m-%dT%H:%M:%S")  # Adjust the format if needed
      
sinks:
  vlogs:
    inputs:
      - parse_syslog
    type: elasticsearch
    endpoints:
      - "http://127.0.0.1:9428/insert/elasticsearch/"
    api_version: "v8"
    compression: gzip
    healthcheck:
      enabled: false
    query: 
      _msg_field: message
      _time_field: timestamp
      # _stream_fields:
      #   - host
      #   - container_name
      #   - appname
      _stream_fields:
        - cache_status
        - status_code
        - remote_ip
        - referer_url
        - url
        - edge_location
        - user_agent
        - country_code

# sources:
#   vector_metrics:
#     type: 
#       internal_metrics

# sinks:
#   prometheus:
#     type: prometheus_remote_write
#     endpoint:
#       - "http://0.0.0.0:9598"
#     inputs: 
#       - vector_metrics
